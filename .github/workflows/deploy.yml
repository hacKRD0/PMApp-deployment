name: Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # # Step 1: Generate .env.backend file using generate-vars.mjs
      # - name: Generate .env.backend file
      #   run: |
      #     mkdir -p ./pmapp  # Create pmapp directory
      #     node generate-vars.mjs "${{ secrets.ENV_VARIABLES_BACKEND }}"  # This should create ./pmapp/.env.backend
      #     ls -l $GITHUB_WORKSPACE/pmapp/.env.backend  # Verify the file was created

      - name: Verify Secrets Presence
        run: |
          if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "SERVER_SSH_KEY is missing or empty."
            exit 1
          else
            echo "SERVER_SSH_KEY is set. ${{ secrets.SERVER_SSH_KEY }}"
          fi

          if [ -z "${{ secrets.SERVER_HOST }}" ]; then
            echo "SERVER_HOST is missing or empty."
            exit 1
          else
            echo "SERVER_HOST is set. ${{ secrets.SERVER_HOST }}"
          fi

          if [ -z "${{ secrets.SERVER_USER }}" ]; then
            echo "SERVER_USER is missing or empty."
            exit 1
          else
            echo "SERVER_USER is set. ${{ secrets.SERVER_USER }}"
          fi

      # # Step 2: Transfer .env.backend to EC2 instance
      - name: Transfer .env.backend to EC2
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: |
            ./docker-compose.yml
            ./nginx.conf
          target: ~/pmapp/

      # Step 3: SSH into EC2 and deploy with Docker Compose
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: |
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}
            ENV_VARIABLES_BACKEND=${{ secrets.ENV_VARIABLES_BACKEND }}
          script: |
            # Ensure pmapp directory exists on EC2
            mkdir -p ~/pmapp

            # Install Node.js on EC2 if not installed (optional, if Node is needed on the server)
            if ! command -v node &> /dev/null; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
              nvm install 20
            fi

            cat "$DOCKER_PASSWORD" "$DOCKER_USERNAME" "$ENV_VARIABLES_BACKEND"
            # Generate .env.backend using generate-vars.mjs on EC2
            cd ~/pmapp
            # node generate-vars.mjs "$ENV_VARIABLES_BACKEND"

            # Log in to Docker
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            # Run docker-compose to pull latest images and start containers
            cd ~/pmapp
            docker-compose down       # Stop existing containers
            docker-compose pull       # Pull the latest images from Docker Hub
            docker-compose up -d      # Start containers in detached mode
