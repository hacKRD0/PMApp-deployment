name: Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Node.js on GitHub Actions runner to run generate-vars.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # Step 1: Generate .env.backend file using generate-vars.js
      - name: Generate .env.backend file
        run: node ../generate-vars.js "${{ secrets.ENV_VARIABLES_BACKEND }}"  # This script should create ./pmapp/.env.backend

      # Step 2: Transfer .env.backend to EC2 instance
      - name: Transfer .env.backend to EC2
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: ./pmapp/.env.backend
          target: ~/pmapp/.env.backend

      # Step 3: SSH into EC2 and deploy with Docker Compose
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: |
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          script: |
            # Ensure pmapp directory exists on EC2
            mkdir -p ~/pmapp

            # Install Node.js on EC2 if not installed (optional, if Node is needed on the server)
            if ! command -v node &> /dev/null; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
              nvm install 20
            fi

            # Log in to Docker
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

            # Run docker-compose to pull latest images and start containers
            cd ~/pmapp
            docker-compose down       # Stop existing containers
            docker-compose pull       # Pull the latest images from Docker Hub
            docker-compose up -d      # Start containers in detached mode
